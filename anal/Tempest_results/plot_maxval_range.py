#!/usr/bin/env python
# ===============================================================================
# Script to plot the maximum value of a variable over time with a confidence 
# difference for the range of the maximum value over time using the data files
# generated by get_maxval.py and get_maxval_range.py
#
# Example call:
#     python tempest_plot_range.py \
#     "Max W ARS343" \
#     ~/data/maxW_range.txt \
#     ~/data/ARS343_dt300s_maxW.txt \
#     ~/data/ARS343_dt200s_maxW.txt \
#     --Legend "dt 300s" "dt 200s" \
#     --DevTol 0.10
#
# D.J. Gardner @ LLNL, Mar 2017
# ===============================================================================

def main():

    import argparse   
    import os, sys
    import shlex

    import numpy as np
    from scipy import stats
    import matplotlib.pyplot as plt  # plotting functions
    import matplotlib.cm     as cm   # colormap for graphics
    
    parser = argparse.ArgumentParser(
        description='Plot error over time between two runs')
    
    parser.add_argument('Label', type=str,
                        help='label used in plot title and figure file name')
    
    parser.add_argument('RangeData', type=str,
                        help='data file with mean and deviation data to define confidence interval')

    parser.add_argument('Tests', type=str, nargs='+',
                        help='path to test output files')

    parser.add_argument('--DevTol', dest='DevTol', type=float,
                        default=0.1,
                        help='add mean solution to plot')

    parser.add_argument('--SmoothedDev', dest='SmoothedDev', action='store_true',
                        help='Used smoothed deviation')

    parser.add_argument('--NoMeanPlot', dest='NoMeanPlot',
                        action='store_true',
                        help='add mean solution to plot')
    
    # plotting options
    parser.add_argument('--Legend', dest='Legend', type=str, nargs='+',
                        help='Set plot labels in legend')

    parser.add_argument('--SetColors', dest='SetColors', type=int, nargs='+', 
                        help='Set line colors')

    parser.add_argument('--SetLines', dest='SetLines', type=int, nargs='+',
                        help='Set lines styles')

    parser.add_argument('--SetMarkers', dest='SetMarkers', type=int, nargs='+',
                        help='Set marker styles')

    parser.add_argument('--Show', dest='Show', action='store_true',
                        help='turn on debugging output')

    # script debugging output
    parser.add_argument('--Debug', dest='Debug', action='store_true',
                        help='turn on debugging output')

    # parse command line args
    args = parser.parse_args()

    if (args.Debug):
        print args.RangeData
        print args.Tests

    # ---------------------------------------------------------------------------
    # plot settings
    # ---------------------------------------------------------------------------      

    nplots = len(args.Tests)

    # line colors (qualitative colors from colorbrewer2.org)
    if (args.SetColors):    

        if (len(args.SetColors) != nplots):
            msg = "ERROR: len(SetColors) != len(outfiles)"
            raise Exception(msg)

        totalcolors = max(args.SetColors)+1

    else:
        totalcolors = nplots

        args.SetColors = range(nplots)

    if (totalcolors < 10):
        colors = ['#e41a1c','#377eb8','#4daf4a','#984ea3',
                  '#ff7f00','#a65628','#f781bf','#999999','#000000']
    elif (totalcolors < 14):
        colors = ['#a6cee3','#1f78b4','#b2df8a','#33a02c',
                  '#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6',
                  '#6a3d9a','#ffff99','#b15928','#000000']
    else:
        colors = cm.Set1(np.linspace(0, 1, totalcolors))

    Cvalue = []
    for i in args.SetColors:
        Cvalue.append(colors[i])

    # line styles
    LineStyles = ['-','--','-.',':']
    if (args.SetLines):
        
        if (len(args.SetLines) != nplots):
            msg = "ERROR: len(SetLines) != len(outfiles)"
            raise Exception(msg)

        if (max(args.SetLines)-1 > len(LineStyles)):
            msg = "Only "+len(LineStyles)+" line styles are available"
            raise Exception(msg)

        Lstyle = []
        for i in args.SetLines:
            Lstyle.append(LineStyles[i])

    else:
        Lstyle = ['-'] * nplots

    # legend
    if (args.Legend):
        if (len(args.Legend) != len(args.Tests)):
            print "ERROR: len(Legend) != len(Tests)"
            sys.exit()
    else:
        args.Legend = [None] * len(args.Tests)

    # ---------------------------------------------------------------------------
    # plot range
    # ---------------------------------------------------------------------------

    # create figure
    plt.figure('Test')

    # load confidence interval data
    rangedata  = np.loadtxt(args.RangeData)

    times = rangedata[:,0] # output times
    mean  = rangedata[:,1] # mean value

    # confidence interval deviation
    if (not args.SmoothedDev):
        dev = rangedata[:,2] # raw deviation
    else:
        dev = rangedata[:,3] # smoothed deviation  

    # max pointwise deviation
    maxdev = np.amax(dev) 
    mintol = args.DevTol * maxdev

    # smoothed confidence interval range
    lower_dev = mean - dev
    upper_dev = mean + dev

    # zero out negative values
    idx = lower_dev < 0.0
    lower_dev[idx] = 0.0

    # plot confidence interval
    plt.fill_between(times, lower_dev, upper_dev, color='red', alpha=0.2)

    # min tolerance range
    lower_mintol = mean - mintol
    upper_mintol = mean + mintol

    # zero out negative values
    idx = lower_mintol < 0.0
    lower_mintol[idx] = 0.0       

    # plot min tolerance interval
    plt.fill_between(times, lower_mintol, upper_mintol, color='blue', alpha=0.2)
    
    # combined range
    testdev = np.maximum(dev, mintol)

    # print dev
    # print mintol
    # print testdev

    # lower = np.minimum(lower_mintol, lower_dev)
    # upper = np.maximum(upper_mintol, upper_dev)

    # plt.plot(times, lower, color='black', alpha=0.3)
    # plt.plot(times, upper, color='black', alpha=0.3)

    if (not args.NoMeanPlot):
        # plot mean value
        plt.plot(times, mean, color='black', linestyle=':')

    # ---------------------------------------------------------------------------
    # plot tests
    # ---------------------------------------------------------------------------        
    t_count = 0

    for t in args.Tests:

        print "Test:",t
        
        if (not os.path.isfile(t)):
            print ">>> ERROR: ",t," does not exist"
            sys.exit()

        # load data
        data = np.loadtxt(t) 

        # extract time and max values
        times   = data[:,0]
        maxvals = data[:,1]

        # do maxvals lie in combined range
        diff = np.abs(maxvals - mean)
        
        outofbounds = np.greater(diff, testdev)
        
        if np.any(outofbounds):
            passed = False
            maxout = np.amax(diff[np.where(outofbounds)])
        else:
            passed = True
            maxout = 0       
        
        print passed, maxout/maxdev
        print 

        str_devratio = "{:.3f}".format(maxout/maxdev)

        # plot max vals
        plt.plot(times, maxvals,
                 linestyle=Lstyle[t_count], 
                 color=Cvalue[t_count], 
                 label=args.Legend[t_count]+" "+str(passed)+" "+str_devratio)

        # update test counter
        t_count+=1

    plt.title(args.Label.replace("_"," "))
    plt.xlabel('Day')
    plt.ylabel('Max |W|')
    plt.grid(True)
    lgd = plt.legend(loc='center',
                     bbox_to_anchor = (0.6, 0.25, 1.1, 1),
                     bbox_transform = plt.gcf().transFigure)
            
    if (args.Show):
        plt.show()
    else:
        fname = args.Label.replace(" ","_")+'_range.pdf'
        plt.tight_layout()
        plt.savefig(fname, dpi='300', format='pdf', 
                    bbox_extra_artists=(lgd,), bbox_inches='tight')        

# ===============================================================================

if __name__ == "__main__":
    main()

# EOF

